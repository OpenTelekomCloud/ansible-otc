- name: Request router from API
  uri:
    url: "{{ AUTH_URL_VPC }}/v2.0/routers/{{ vpc_id }}"
    method: GET
    return_content: yes
    validate_certs: yes
    HEADER_Content-Type: "application/json"
    HEADER_X-Auth-Token: "{{ token['x_subject_token'] }}"
  when: 
    - vpc_id is defined
  register: routerlist

- set_fact:
#    router_id: "{{ (routerlist.content|from_json)|json_query('router.id') }}"
#    router_name: "{{ (routerlist.content|from_json)|json_query('router.name') }}"
#    router_status: "{{ (routerlist.content|from_json)|json_query('router.status') }}"
#    router_admin_state_up: "{{ (routerlist.content|from_json)|json_query('router.admin_state_up') }}"
#    router_routes: "{{ (routerlist.content|from_json)|json_query('router.routes[]') }}"
#    router_tenant_id: "{{ (routerlist.content|from_json)|json_query('router.tenant_id') }}"
    external_network_id: "{{ (routerlist.content|from_json)|json_query('router.external_gateway_info.network_id') }}"
#    external_network_snat_state: "{{ (routerlist.content|from_json)|json_query('router.external_gateway_info.enable_snat') }}"
  when: routerlist is defined

- name: Send request to API
  uri:
    url: "{{ AUTH_URL_VPC }}/v2.0/routers/{{ vpc_id }}"
    method: PUT
    body_format: raw
    follow_redirects: all
    return_content: yes 
    validate_certs: yes
    HEADER_Content-Type: "application/json"
    HEADER_X-Auth-Token: "{{ token['x_subject_token'] }}"
    body: "{{ lookup('template', 'roles/snat_enable/templates/request.json.j2')|to_json }}" 
  when: 
    - vpc_id is defined
    - enable_snat is defined
    - external_network_id|length != 0
  register: router

- debug:
    msg: "{{ router }}"
