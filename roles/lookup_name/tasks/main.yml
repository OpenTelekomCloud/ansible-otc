- name: set fact for availability_zone_id (eu_de-01)
  set_fact:
    availability_zone_id: "bf84aba586ce4e948da0b97d9a7d62fb"
  when: 
    - listener_name is undefined
    - elb_availability_zone is defined and elb_availability_zone == "eu_de-01"

- name: set fact for availability_zone_id /ei_de-01)
  set_fact:
    availability_zone_id: "bf84aba586ce4e948da0b97d9a7d62fc"
  when: 
    - listener_name is undefined
    - elb_availability_zone is defined and elb_availability_zone == "eu_de-02"

- name: Request images list from  API
  uri:
    url: "{{ AUTH_URL_IMS }}/v2/cloudimages?name={{ image_name }}"
    method: GET
    return_content: yes 
    validate_certs: yes
    HEADER_Content-Type: "application/json"
    HEADER_X-Auth-Token: "{{ token['x_subject_token'] }}"
  when: image_name is defined
  register: ims_result

- set_fact:
    image_id: "{{ (ims_result.content|from_json)|json_query('images[].id|[0]') }}"
  when: image_name is defined

- name: Request vpc list from API
  uri:
    url: "{{ AUTH_URL_VPC }}/v1/{{ PROJECT_ID }}/vpcs"
    method: GET
    return_content: yes
    validate_certs: yes
    HEADER_Content-Type: "application/json"
    HEADER_X-Auth-Token: "{{ token['x_subject_token'] }}"
  when: vpc_name is defined
  register: vpc_result

- set_fact:
    vpc_id: "{{ (vpc_result.content|from_json)|json_query(\"vpcs[?name=='\" + vpc_name + \"'].id|[0]\") }}"
  when: vpc_name is defined

- name: Request subnet list from API for elb
  uri:
    url: "{{ AUTH_URL_VPC }}/v1/{{ PROJECT_ID }}/subnets"
    method: GET
    return_content: yes
    validate_certs: yes
    HEADER_Content-Type: "application/json"
    HEADER_X-Auth-Token: "{{ token['x_subject_token'] }}"
  when: 
    - listener_name is undefined
    - elb_subnet_name is defined
  register: subnet_result

- name: set fact for subnet_name (for elb)
  set_fact:
    subnet_name: "{{ elb_subnet_name }}"
  when: 
    - listener_name is undefined
    - elb_subnet_name is defined and elb_subnet_name|length != 0

- name: Request subnet list from API for ecs
  uri:
    url: "{{ AUTH_URL_VPC }}/v1/{{ PROJECT_ID }}/subnets"
    method: GET
    return_content: yes
    validate_certs: yes
    HEADER_Content-Type: "application/json"
    HEADER_X-Auth-Token: "{{ token['x_subject_token'] }}"
  when: subnet_name is defined
  register: subnet_result

- name: set fact for subnet_id
  set_fact:
    subnet_id: "{{ (subnet_result.content|from_json)|json_query(\"subnets[?name=='\" + subnet_name + \"'].id|[0]\") }}"
  when: subnet_name is defined and subnet_name|length != 0

- name: Request secgroup list from API for elb
  uri:
    url: "{{ AUTH_URL_VPC }}/v1/{{ PROJECT_ID }}/security-groups"
    method: GET
    return_content: yes
    validate_certs: yes
    HEADER_Content-Type: "application/json"
    HEADER_X-Auth-Token: "{{ token['x_subject_token'] }}"
  when: 
    - listener_name is undefined
    - elb_secgroup_name is defined
  register: secgroup_result

- name: set fact secgroup_name (for elb)
  set_fact:
    secgroup_name: "{{ elb_secgroup_name }}"
  when: 
    - listener_name is undefined
    - elb_secgroup_name is defined

- name: Request secgroup list from API for ecs
  uri:
    url: "{{ AUTH_URL_VPC }}/v1/{{ PROJECT_ID }}/security-groups"
    method: GET
    return_content: yes
    validate_certs: yes
    HEADER_Content-Type: "application/json"
    HEADER_X-Auth-Token: "{{ token['x_subject_token'] }}"
  when: secgroup_name is defined
  register: secgroup_result

- name: set fact for secgroup_id
  set_fact:
    secgroup_id: "{{ (secgroup_result.content|from_json)|json_query(\"security_groups[?name=='\" + secgroup_name + \"'].id|[0]\") }}"
  when: 
    - secgroup_name is defined and secgroup_name| length != 0

- name: Request flavor list from API
  uri:
    url: "{{ AUTH_URL_ECS_CLOUD }}/{{ PROJECT_ID }}/cloudservers/flavors"
    method: GET
    return_content: yes
    validate_certs: yes
    HEADER_Content-Type: "application/json"
    HEADER_X-Auth-Token: "{{ token['x_subject_token'] }}"
  when: ecs_ram is defined and ecs_vcpus is defined
  register: flavor_result

- set_fact:
    flavor_id: "{{ (flavor_result.content|from_json)|json_query('sort_by(flavors, &ram)|[?ram>=`' + ecs_ram + '` && vcpus>=`' + ecs_vcpus + '`].id|[0]') }}"
  when: (ecs_ram is defined and ecs_ram |length != 0) or (ecs_vcpus is defined and ecs_vcpus|length != 0)

- name: Request keypair list from  API
  uri:
    url: "{{ AUTH_URL_ECS }}/os-keypairs"
    method: GET
    return_content: yes
    validate_certs: yes
    HEADER_Content-Type: "application/json"
    HEADER_X-Auth-Token: "{{ token['x_subject_token'] }}"
  when: ecs_adminkey is defined
  register: keypairlist_result

- set_fact:
    ecs_adminkey_name: "{{ (keypairlist_result.content|from_json)|json_query(\"keypairs[?keypair.name=='\" + ecs_adminkey + \"'].keypair.name\") }}"
  when: ecs_adminkey is defined and ecs_adminkey|length != 0

- name: Request floatingip list from API
  uri:
    url: "{{ AUTH_URL_VPC }}/v1/{{ PROJECT_ID }}/publicips"
    method: GET
    return_content: yes
    validate_certs: yes
    HEADER_Content-Type: "application/json"
    HEADER_X-Auth-Token: "{{ token['x_subject_token'] }}"
  register: floatingiplist_result

- set_fact: 
    eip_id: "{{ (floatingiplist_result.content|from_json)|json_query(\"publicips[?public_ip_address=='\" + public_ip_address + \"'].id|[0]\") }}"
  when: (public_ip_address is defined and public_ip_address | ipaddr)

- name: Request zone list from API
  uri:
    url: "{{ AUTH_URL_DNS }}/v2/zones"
    method: GET
    return_content: yes
    validate_certs: yes
    HEADER_Content-Type: "application/json"
    HEADER_X-Auth-Token: "{{ token['x_subject_token'] }}"
  when: zone_name is defined
  register: zonelist_result

- set_fact: 
    zone_id: "{{ (zonelist_result.content|from_json)|json_query(\"zones[?name=='\" + zone_name + \"'].id|[0]\") }}"
  when: zone_name is defined

- name: Request ecs list from API
  uri:
    url: "{{ AUTH_URL_ECS }}/servers"
    method: GET
    return_content: yes 
    validate_certs: yes
    HEADER_Content-Type: "application/json"
    HEADER_X-Auth-Token: "{{ token['x_subject_token'] }}"
  register: ecs_result
  when: ecs_name is defined

- set_fact:
    ecs_id: "{{ (ecs_result.content|from_json)|json_query(\"servers[?name=='\" + ecs_name + \"'].id|[0]\") }}"
  when: ecs_name is defined

- name: Request elb list from API
  uri:
    url: "{{ AUTH_URL_ELB }}/{{ PROJECT_ID }}/elbaas/loadbalancers"
    method: GET
    follow_redirects: all
    return_content: yes
    validate_certs: yes
    HEADER_Content-Type: "application/json"
    HEADER_X-Auth-Token: "{{ token['x_subject_token'] }}"
  register: elb_result
  when: elb_name is defined

- set_fact:
    elb_id: "{{ (elb_result.content|from_json)|json_query(\"loadbalancers[?name=='\" + elb_name + \"'].id|[0]\") }}"
  when: elb_name is defined

- name: Request elb certificate list from API
  uri:
    url: "{{ AUTH_URL_ELB }}/{{ PROJECT_ID }}/elbaas/certificate"
    method: GET
    follow_redirects: all
    return_content: yes
    validate_certs: yes
    HEADER_Content-Type: "application/json"
    HEADER_X-Auth-Token: "{{ token['x_subject_token'] }}"
  register: listener_certificate_result
  when: listener_certificate_name is defined and listener_certificate_name|length != 0

- set_fact:
    listener_certificate_id: "{{ (listener_certificate_result.content|from_json)|json_query(\"certificates[?name=='\" + listener_certificate_name + \"'].id|[0]\") }}"
  when: listener_certificate_name is defined and listener_certificate_name|length != 0

- name: Request elb listener from  API
  uri:
    url: "{{ AUTH_URL_ELB }}/{{ PROJECT_ID }}/elbaas/listeners?loadbalancer_id={{ elb_id}}"
    method: GET
    follow_redirects: all
    return_content: yes
    validate_certs: yes
    HEADER_Content-Type: "application/json"
    HEADER_X-Auth-Token: "{{ token['x_subject_token'] }}"
  register: listener_result
  when: elb_id is defined

- set_fact:
    listener_id: "{{ (listener_result.content|from_json)|json_query(\"[?name=='\" + listener_name + \"'].id|[0]\") }}"
  when: listener_name is defined

#- debug:
#    msg: "{{ listener_certificate_id }}"
#  when: ecs_id is defined
