---

- hosts: localhost
  gather_facts: no
  connection: local
  vars_files:
    - buildservice_var.yml
  vars:
    date: "{{ lookup('pipe', 'date +%Y%m%d') }}"
  tasks:
  - name: Download ubuntu image {{ distro }}
    get_url:
      url: "https://cloud-images.ubuntu.com/{{ distro}}/current/{{ distro }}-server-cloudimg-amd64-disk1.img"
      dest: "./{{ distro }}-server-cloudimg-amd64-{{ date }}.vmdk"
      force: yes

- hosts: localhost
  gather_facts: no
  connection: local
  vars:
    date: "{{ lookup('pipe', 'date +%Y%m%d') }}"
    bucket: "buildservice"
    ecs_name: "buildserver"
    object: "{{ distro }}-server-cloudimg-amd64-{{ date }}.vmdk"
  vars_files:
    - buildservice_var.yml
  roles:
    - role: s3_bucket_create
    - role: s3_upload

- hosts: localhost
  gather_facts: no
  connection: local
  vars:
    date: "{{ lookup('pipe', 'date +%Y%m%d') }}"
    bucket: "buildservice"
    image_name: "{{ distro }}-server-cloudimg-amd64-{{ date }}"
    image_url: "{{ bucket }}:{{ distro }}-server-cloudimg-amd64-{{ date }}.vmdk"
    image_min_disk: 12
  roles:
    - role: token
    - role: image_create

  tasks:
    - name: Check image status
      uri:
        url: "{{ AUTH_URL_IMS }}/v2/cloudimages?name={{ image_name }}"
        method: GET
        return_content: yes
        validate_certs: yes
        HEADER_Content-Type: "application/json"
        HEADER_X-Auth-Token: "{{ token['x_subject_token'] }}"
      when: image_name is defined
      register: ims_result
      until: (ims_result.content|from_json)|json_query('images[].status|[0]') == 'active'
      retries: 50
      delay: 10

- name: Create VPC
  hosts: localhost
  gather_facts: no
  vars_files:
    - buildservice_var.yml
  roles:
    - role: token
    - role: lookup_name
    - role: vpc_create

- name: Create Subnet
  hosts: localhost
  gather_facts: no
  connection: local
  vars_files:
    - buildservice_var.yml
  roles:
    - role: token
    - role: lookup_name
    - role: subnet_create

- name: Create Secgroup
  hosts: localhost
  gather_facts: no
  vars_files:
    - buildservice_var.yml
  roles:
    - role: token
    - role: lookup_name
    - role: secgroup_create

- name: Create Secgrouprules
  hosts: localhost
  gather_facts: no
  vars_files:
    - buildservice_var.yml
  roles:
    - role: token
    - role: lookup_name
  tasks:
    - name: secgrouprule_create role
      include_role:
        name: secgrouprule_create
      vars:
        secgrouprule_direction: "{{ item.value.secgrouprule_direction }}"
        secgrouprule_ethertype: "{{ item.value.secgrouprule_ethertype }}"
        secgrouprule_protocol: "{{ item.value.secgrouprule_protocol }}"
        secgrouprule_port_range_min: "{{ item.value.secgrouprule_port_range_min }}"
        secgrouprule_port_range_max: "{{ item.value.secgrouprule_port_range_max }}"
        secgrouprule_remote_ip_prefix: "{{ item.value.secgrouprule_remote_ip_prefix }}"
      with_dict: "{{ secgroup_rules }}"

- name: Create Keypair
  hosts: localhost
  gather_facts: no
  vars_files:
    - buildservice_var.yml
  roles:
    - role: token
    - role: lookup_name
    - role: keypair_create

- name: Create EIP
  hosts: localhost
  gather_facts: no
  vars_files:
    - buildservice_var.yml
  roles:
    - role: token
    - role: lookup_name
    - role: eip_apply

- name: Create ECS
  hosts: localhost
  gather_facts: no
  vars_files:
    - buildservice_var.yml
  vars:
    date: "{{ lookup('pipe', 'date +%Y%m%d') }}"
    image_name: "{{ distro }}-server-cloudimg-amd64-{{ date }}"
  roles:
    - role: token
    - role: lookup_name
    - role: ecs_create
    - role: job

- name: Switch to ECS
  hosts: localhost
  gather_facts: no
  vars_files:
    - buildservice_var.yml
  tasks:
  - name: Wait for ssh
    local_action: wait_for
    args:
      port: 22
      host: "{{ public_ip_address }}"
      delay: 60

  - name: Install python2 first
    raw: apt-get -y install python-simplejson
    remote_user: ubuntu
    become: true
    become_method: sudo
    become_user: root
    delegate_to: "{{ public_ip_address }}"

  - name: Doing things on ECS
    shell: apt-get update; apt-get -y install git puppet; rm -rf modules; mkdir modules; git clone https://github.com/dev-sec/puppet-os-hardening.git modules/os_hardening; git clone https://github.com/thias/puppet-sysctl.git modules/sysctl; git clone https://github.com/puppetlabs/puppetlabs-stdlib.git modules/stdlib; puppet apply --modulepath ./modules -e "include os_hardening"
    remote_user: ubuntu
    become: true
    become_method: sudo
    become_user: root
    delegate_to: "{{ public_ip_address }}"

  - name: Stop ECS
    shell: /sbin/shutdown -H +1 &
    remote_user: ubuntu
    become: true
    become_user: root
    become_method: sudo
    ignore_errors: yes
    delegate_to: "{{ public_ip_address }}"

- name: Check ECS Status
  hosts: localhost
  gather_facts: no
  vars:
    ecs_name: "buildserver"
    ecs_body: "{\"server\": { \"name\": \"{{ ecs_name }}\" }}"
  roles:
    - role: token
    - role: lookup_name
  tasks:
  - name: Check API if ECS is stopped
    uri:
      url: "{{ AUTH_URL_ECS }}/servers/{{ ecs_id }}"
      method: PUT
      body_format: raw
      follow_redirects: all
      return_content: yes
      validate_certs: yes
      HEADER_Content-Type: "application/json"
      HEADER_X-Auth-Token: "{{ token['x_subject_token'] }}"
      body: "{{ ecs_body|to_json }}"
    register: ecs_status
    until: (ecs_status.content|from_json)|json_query('server.status') != 'ACTIVE'
    retries: 50
    delay: 10

- name: Create new image
  hosts: localhost
  gather_facts: no
  vars:
    ecs_name: "buildserver"
    date: "{{ lookup('pipe', 'date +%Y%m%d') }}"
    image_name: "buildservice-{{ distro }}-{{ date }}"
    image_job_id: "{{ (image_create.content|from_json)|json_query('job_id') }}"
  vars_files:
    - buildservice_var.yml
  roles:
    - role: token
    - role: lookup_name
    - role: image_create
  tasks:
  - name: Request job status from  API
    uri:
      url: "{{ AUTH_URL_ECS_CLOUD }}/{{ PROJECT_ID }}/jobs/{{ image_job_id }}"
      method: GET
      return_content: yes
      validate_certs: yes
      HEADER_Content-Type: "application/json"
      HEADER_X-Auth-Token: "{{ token['x_subject_token'] }}"
    when: image_job_id is defined
    register: jobstatus
    until: (jobstatus.content|from_json)|json_query('status') == 'SUCCESS'
    retries: 50
    delay: 10

- name: Delete ECS
  hosts: localhost
  gather_facts: no
  vars:
    ecs_name: "buildserver"
    delete_volume: true
  vars_files:
    - buildservice_var.yml
  roles:
    - role: token
    - role: lookup_name
    - role: ecs_delete
